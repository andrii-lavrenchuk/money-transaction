{"version":3,"file":"static/js/129.5451ab25.chunk.js","mappings":"mLAqBA,EAlBgB,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC5B,OACE,+BACE,UAACC,EAAA,EAAD,CAAMC,OAAO,OAAOC,UAAU,YAA9B,WACE,SAACF,EAAA,SAAD,UAAcF,KACd,SAACE,EAAA,OAAD,WACE,SAACA,EAAA,QAAD,UAAaD,a,sFCqBvB,EA3BmB,SAAC,GAAwC,IAAtCI,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBACnC,OACE,SAAC,IAAD,CACEC,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,UAAWL,EACXM,aAAcL,EACdM,mBAAoB,yCACpBC,cAAe,YACfC,kBAAmB,YACnBC,iBAAkB,YAClBC,sBAAuB,YACvBC,cAAe,YACfC,kBAAmB,YACnBC,eAAgB,YAChBC,mBAAoB,YACpBC,gBAAiB,a,4LCoDjBC,EAAqB,CACzBC,gBAAiBC,EAAAA,EAAAA,gBACjBC,gBAAiBD,EAAAA,EAAAA,eAYnB,GAAeE,EAAAA,EAAAA,KApBS,SAACC,GAAD,MAAY,CAClCC,aAAcD,EAAME,MAAMD,aAC1BE,UAAWH,EAAME,MAAMC,UACvBC,aAAcJ,EAAME,MAAME,gBAiBYT,EAAxC,EAzEqB,SAAC,GAOf,IANLS,EAMI,EANJA,aACAR,EAKI,EALJA,gBACAK,EAII,EAJJA,aACAE,EAGI,EAHJA,UACAL,EAEI,EAFJA,gBACAO,EACI,EADJA,gBAEMC,GAAWC,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,MAARD,IAMR,OAJAE,EAAAA,EAAAA,YAAU,WACRd,MACC,CAACK,EAAcL,IAEXO,GACL,SAACQ,EAAA,EAAD,KAEA,8BAC2B,IAAxBP,EAAaQ,QACZ,+CAEA,gBAAKnC,UAAU,gCAAf,UACE,SAACoC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,SACGV,EAAgBW,KAAI,SAACC,GAAD,OACnB,4BACE,SAAC,KAAD,CACExC,UAAU,UACVyC,GAAI,CACFC,SAAS,GAAD,OAAKX,EAAL,YAAYS,EAAQG,MAC5BpB,MAAO,CAAEqB,KAAMf,IAJnB,UAOE,SAACgB,EAAA,EAAD,CACEjD,UAAW4C,EAAQ5C,UACnBC,SAAU2C,EAAQ3C,cAGtB,SAACiD,EAAA,EAAD,CACEC,QAAS,kBAAM1B,EAAgBmB,EAAQG,OACvCK,QAAQ,iBAFV,sBAbQR,EAAQS,gBCgBhC,GAAe3B,EAAAA,EAAAA,KAXS,SAACC,GAAD,MAAY,CAClC2B,cAAe3B,EAAME,MAAM0B,YAAYF,GAEvCtB,aAAcJ,EAAME,MAAME,gBAQY,KAAxC,EA9CyB,SAAC,GAAqC,IAAnCuB,EAAkC,EAAlCA,cAAevB,EAAmB,EAAnBA,aACzC,GAA0ByB,EAAAA,EAAAA,UAAS,GAA5BC,GAAP,eACA,GAAsCD,EAAAA,EAAAA,UAAS,GAA/C,eAAOE,EAAP,KAAoBC,EAApB,KAIMC,EAAqBF,EAAcD,EACnCI,EAAsBD,EAAqBH,EAC3CK,EAJkB/B,EAAaY,KAAI,SAACoB,GAAD,OAAUA,KAIXC,MACtCH,EACAD,GAGIK,EAAmBC,KAAKC,KAAKpC,EAAaQ,OAASkB,GAMzD,OAAOH,GACL,iCACE,eAAIlD,UAAU,OAAd,0BACA,SAAC,EAAD,CAAc4B,gBAAiB8B,IAC9B/B,EAAaQ,QAAU,IACtB,SAAC6B,EAAA,EAAD,CACE/D,cAAe4D,EACf3D,gBAXgB,SAAC+D,GACvBV,EAAeU,EAAKC,SAAW,IAWzBC,QAAS,QAKf","sources":["components/Contact/Contact.js","components/Pagination/Pagination.js","components/ContactsList/ContactsList.js","components/views/UserContactsView/UserContactsView.js"],"sourcesContent":["import { Card } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Contact = ({ firstName, lastName }) => {\r\n  return (\r\n    <>\r\n      <Card border=\"info\" className=\"mt-5 mb-3\">\r\n        <Card.Header>{firstName}</Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>{lastName}</Card.Title>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n};\r\n\r\nexport default Contact;\r\n","import ReactPaginate from \"react-paginate\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Pagination = ({ contentLength, handlePageClick }) => {\r\n  return (\r\n    <ReactPaginate\r\n      previousLabel={\"prev\"}\r\n      nextLabel={\"next\"}\r\n      breakLabel={\"...\"}\r\n      pageCount={contentLength}\r\n      onPageChange={handlePageClick}\r\n      containerClassName={\"pagination justify-content-center mt-5\"}\r\n      pageClassName={\"page-item\"}\r\n      pageLinkClassName={\"page-link\"}\r\n      previouslassName={\"page-item\"}\r\n      previousLinkClassName={\"page-link\"}\r\n      nextClassName={\"page-item\"}\r\n      nextLinkClassName={\"page-link\"}\r\n      breakClassName={\"page-item\"}\r\n      breakLinkClassName={\"page-link\"}\r\n      activeClassName={\"active\"}\r\n    />\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  contentLength: PropTypes.number.isRequired,\r\n  handlePageClick: PropTypes.func,\r\n};\r\n\r\nexport default Pagination;\r\n","import { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { Link, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// components\r\nimport Loader from \"../Loader\";\r\nimport Contact from \"../Contact\";\r\nimport { Button, Col } from \"react-bootstrap\";\r\n\r\n// operations\r\nimport { usersOperations } from \"../../redux/users\";\r\n\r\nconst ContactsList = ({\r\n  contactsList,\r\n  getContactsList,\r\n  addedContact,\r\n  isLoading,\r\n  onDeleteContact,\r\n  visibleContacts,\r\n}) => {\r\n  const location = useLocation();\r\n  const { url } = useRouteMatch();\r\n\r\n  useEffect(() => {\r\n    getContactsList();\r\n  }, [addedContact, getContactsList]);\r\n\r\n  return isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <>\r\n      {contactsList.length === 0 ? (\r\n        <h4>Add fisrt contact</h4>\r\n      ) : (\r\n        <div className=\"d-flex justify-content-center\">\r\n          <Col md={6} lg={3}>\r\n            {visibleContacts.map((contact) => (\r\n              <div key={contact.id}>\r\n                <Link\r\n                  className=\"d-block\"\r\n                  to={{\r\n                    pathname: `${url}/${contact.user}`,\r\n                    state: { from: location },\r\n                  }}\r\n                >\r\n                  <Contact\r\n                    firstName={contact.firstName}\r\n                    lastName={contact.lastName}\r\n                  />\r\n                </Link>\r\n                <Button\r\n                  onClick={() => onDeleteContact(contact.user)}\r\n                  variant=\"outline-danger\"\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </div>\r\n            ))}\r\n          </Col>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  addedContact: state.users.addedContact,\r\n  isLoading: state.users.isLoading,\r\n  contactsList: state.users.contactsList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getContactsList: usersOperations.getContactsList,\r\n  onDeleteContact: usersOperations.deleteContact,\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contactsList: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n  getContactsList: PropTypes.func.isRequired,\r\n  addedContact: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  isLoading: PropTypes.bool,\r\n  onDeleteContact: PropTypes.func,\r\n  visibleContacts: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import { connect } from \"react-redux\";\r\nimport { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// components\r\nimport Pagination from \"../../Pagination\";\r\nimport ContactsList from \"../../ContactsList\";\r\n\r\nconst UserContactsView = ({ currentUserId, contactsList }) => {\r\n  const [contactsPerPage] = useState(5);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const visibleContacts = contactsList.map((item) => item);\r\n\r\n  const indexOfLastContact = currentPage * contactsPerPage;\r\n  const indexOfFirstContact = indexOfLastContact - contactsPerPage;\r\n  const currentContacts = visibleContacts.slice(\r\n    indexOfFirstContact,\r\n    indexOfLastContact\r\n  );\r\n\r\n  const paginationLength = Math.ceil(contactsList.length / contactsPerPage);\r\n\r\n  const handlePageClick = (data) => {\r\n    setCurrentPage(data.selected + 1);\r\n  };\r\n\r\n  return currentUserId ? (\r\n    <>\r\n      <h2 className=\"pt-5\">My contacts</h2>\r\n      <ContactsList visibleContacts={currentContacts} />\r\n      {contactsList.length >= 5 && (\r\n        <Pagination\r\n          contentLength={paginationLength}\r\n          handlePageClick={handlePageClick}\r\n          perPage={5}\r\n        />\r\n      )}\r\n    </>\r\n  ) : (\r\n    <h2>You have to create profile first</h2>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  currentUserId: state.users.currentUser.id,\r\n\r\n  contactsList: state.users.contactsList,\r\n});\r\n\r\nUserContactsView.propTypes = {\r\n  currentUserId: PropTypes.string.isRequired,\r\n  contactsList: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(UserContactsView);\r\n"],"names":["firstName","lastName","Card","border","className","contentLength","handlePageClick","previousLabel","nextLabel","breakLabel","pageCount","onPageChange","containerClassName","pageClassName","pageLinkClassName","previouslassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","mapDispatchToProps","getContactsList","usersOperations","onDeleteContact","connect","state","addedContact","users","isLoading","contactsList","visibleContacts","location","useLocation","url","useRouteMatch","useEffect","Loader","length","Col","md","lg","map","contact","to","pathname","user","from","Contact","Button","onClick","variant","id","currentUserId","currentUser","useState","contactsPerPage","currentPage","setCurrentPage","indexOfLastContact","indexOfFirstContact","currentContacts","item","slice","paginationLength","Math","ceil","Pagination","data","selected","perPage"],"sourceRoot":""}