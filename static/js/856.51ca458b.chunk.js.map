{"version":3,"file":"static/js/856.51ca458b.chunk.js","mappings":"mLAqBA,EAlBgB,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC5B,OACE,+BACE,UAACC,EAAA,EAAD,CAAMC,OAAO,OAAOC,UAAU,YAA9B,WACE,SAACF,EAAA,SAAD,UAAcF,KACd,SAACE,EAAA,OAAD,WACE,SAACA,EAAA,QAAD,UAAaD,a,sFCqBvB,EA3BmB,SAAC,GAAwC,IAAtCI,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBACnC,OACE,SAAC,IAAD,CACEC,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,UAAWL,EACXM,aAAcL,EACdM,mBAAoB,yCACpBC,cAAe,YACfC,kBAAmB,YACnBC,iBAAkB,YAClBC,sBAAuB,YACvBC,cAAe,YACfC,kBAAmB,YACnBC,eAAgB,YAChBC,mBAAoB,YACpBC,gBAAiB,a,2LC6EjBC,EAAqB,CACzBC,WAAYC,EAAAA,EAAAA,YAUd,GAAeC,EAAAA,EAAAA,KAlBS,SAACC,GAAD,MAAY,CAClCC,SAAUD,EAAME,MAAMC,YAAYC,SAClCC,OAAQL,EAAMM,KAAKC,GACnBC,cAAeR,EAAME,MAAMO,aAC3BC,UAAWV,EAAME,MAAMQ,aAced,EAAxC,EA9FqB,SAAC,GAMf,IALLK,EAKI,EALJA,SACAJ,EAII,EAJJA,WACAQ,EAGI,EAHJA,OACAG,EAEI,EAFJA,cACAE,EACI,EADJA,UAEA,GAA0BC,EAAAA,EAAAA,UAAS,GAA5BC,GAAP,eACA,GAAsCD,EAAAA,EAAAA,UAAS,GAA/C,eAAOE,EAAP,KAAoBC,EAApB,KAIMC,EAAqBF,EAAcD,EACnCI,EAAsBD,EAAqBH,EAC3CK,GAJe,OAAOhB,GAIYiB,MACtCF,EACAD,GAGII,EAAmBC,KAAKC,KAAKpB,EAASqB,OAASV,GAkBrD,OACE,gCACGF,GACC,SAACa,EAAA,EAAD,KAEA,iCACE,eAAI7C,UAAU,OAAd,wBACA,gBAAKA,UAAU,gCAAf,UACE,SAAC8C,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,SACGT,EAAgBU,KAAI,SAACC,GAAD,OACnB,4BACE,SAACC,EAAA,EAAD,CACEvD,UAAWsD,EAAKtD,UAChBC,SAAUqD,EAAKrD,YAGjB,SAACuD,EAAA,EAAD,CACEC,QAAS,kBAzBL,SAACH,GACjBA,EAAKI,OAAS3B,EAIlBR,EAAW,CAAEoC,MAAO5B,EAAQ6B,QAASN,EAAKI,OAHxCG,EAAAA,GAAAA,MAAY,iDAuBiBC,CAAcR,IAC7BS,QAAQ,OACRC,UAnCO/B,EAmCmBqB,EAAKI,KAlCxCxB,EAAc+B,SAAShC,IA+BhB,+BANQqB,EAAKrB,IA1BL,IAACA,aA8CrB,SAACiC,EAAA,EAAD,CACE7D,cAAewC,EACfvC,gBA5CkB,SAAC6D,GACvB3B,EAAe2B,EAAKC,SAAW,IA4C3BC,QAAS","sources":["components/Contact/Contact.js","components/Pagination/Pagination.js","components/views/AllUsersView/AllUsersView.js"],"sourcesContent":["import { Card } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Contact = ({ firstName, lastName }) => {\r\n  return (\r\n    <>\r\n      <Card border=\"info\" className=\"mt-5 mb-3\">\r\n        <Card.Header>{firstName}</Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>{lastName}</Card.Title>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n};\r\n\r\nexport default Contact;\r\n","import ReactPaginate from \"react-paginate\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Pagination = ({ contentLength, handlePageClick }) => {\r\n  return (\r\n    <ReactPaginate\r\n      previousLabel={\"prev\"}\r\n      nextLabel={\"next\"}\r\n      breakLabel={\"...\"}\r\n      pageCount={contentLength}\r\n      onPageChange={handlePageClick}\r\n      containerClassName={\"pagination justify-content-center mt-5\"}\r\n      pageClassName={\"page-item\"}\r\n      pageLinkClassName={\"page-link\"}\r\n      previouslassName={\"page-item\"}\r\n      previousLinkClassName={\"page-link\"}\r\n      nextClassName={\"page-item\"}\r\n      nextLinkClassName={\"page-link\"}\r\n      breakClassName={\"page-item\"}\r\n      breakLinkClassName={\"page-link\"}\r\n      activeClassName={\"active\"}\r\n    />\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  contentLength: PropTypes.number.isRequired,\r\n  handlePageClick: PropTypes.func,\r\n};\r\n\r\nexport default Pagination;\r\n","import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// components\r\nimport Contact from \"../../Contact\";\r\nimport Loader from \"../../Loader\";\r\nimport Pagination from \"../../Pagination\";\r\nimport { Button, Col } from \"react-bootstrap\";\r\n\r\n// operations\r\nimport { usersOperations } from \"../../../redux/users\";\r\n\r\nconst AllUsersView = ({\r\n  allUsers,\r\n  addContact,\r\n  userId,\r\n  addedContacts,\r\n  isLoading,\r\n}) => {\r\n  const [contactsPerPage] = useState(5);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const visibleContacts = [...allUsers];\r\n\r\n  const indexOfLastContact = currentPage * contactsPerPage;\r\n  const indexOfFirstContact = indexOfLastContact - contactsPerPage;\r\n  const currentContacts = visibleContacts.slice(\r\n    indexOfFirstContact,\r\n    indexOfLastContact\r\n  );\r\n\r\n  const paginationLength = Math.ceil(allUsers.length / contactsPerPage);\r\n\r\n  const disablingButton = (id) => {\r\n    return addedContacts.includes(id);\r\n  };\r\n\r\n  const handlePageClick = (data) => {\r\n    setCurrentPage(data.selected + 1);\r\n  };\r\n\r\n  const addToContacts = (item) => {\r\n    if (item.user === userId) {\r\n      toast.error(\"You cannot add yourself to the contacts list!\");\r\n      return;\r\n    }\r\n    addContact({ owner: userId, contact: item.user });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <h2 className=\"pt-5\">All users</h2>\r\n          <div className=\"d-flex justify-content-center\">\r\n            <Col md={6} lg={3}>\r\n              {currentContacts.map((item) => (\r\n                <div key={item.id}>\r\n                  <Contact\r\n                    firstName={item.firstName}\r\n                    lastName={item.lastName}\r\n                  />\r\n\r\n                  <Button\r\n                    onClick={() => addToContacts(item)}\r\n                    variant=\"info\"\r\n                    disabled={disablingButton(item.user)}\r\n                  >\r\n                    Add to contacts\r\n                  </Button>\r\n                </div>\r\n              ))}\r\n            </Col>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      <Pagination\r\n        contentLength={paginationLength}\r\n        handlePageClick={handlePageClick}\r\n        perPage={5}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  allUsers: state.users.allProfiles.profiles,\r\n  userId: state.auth.id,\r\n  addedContacts: state.users.addedContact,\r\n  isLoading: state.users.isLoading,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: usersOperations.addContact,\r\n};\r\n\r\nAllUsersView.propTypes = {\r\n  allUsers: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n  addContact: PropTypes.func.isRequired,\r\n  userId: PropTypes.string.isRequired,\r\n  addedContacts: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  isLoading: PropTypes.bool,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllUsersView);\r\n"],"names":["firstName","lastName","Card","border","className","contentLength","handlePageClick","previousLabel","nextLabel","breakLabel","pageCount","onPageChange","containerClassName","pageClassName","pageLinkClassName","previouslassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","mapDispatchToProps","addContact","usersOperations","connect","state","allUsers","users","allProfiles","profiles","userId","auth","id","addedContacts","addedContact","isLoading","useState","contactsPerPage","currentPage","setCurrentPage","indexOfLastContact","indexOfFirstContact","currentContacts","slice","paginationLength","Math","ceil","length","Loader","Col","md","lg","map","item","Contact","Button","onClick","user","owner","contact","toast","addToContacts","variant","disabled","includes","Pagination","data","selected","perPage"],"sourceRoot":""}