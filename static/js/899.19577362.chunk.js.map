{"version":3,"file":"static/js/899.19577362.chunk.js","mappings":"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","sources":["components/views/User/CreateUserProfile/CreateUserProfile.js","components/views/User/UpdateUserProfile/UpdateUserProfile.js","components/views/User/User.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// components\r\nimport { Form, FormGroup, Input, Label, Button, Row, Col } from \"reactstrap\";\r\n\r\n// operations\r\nimport { usersOperations } from \"../../../../redux/users\";\r\n\r\nconst CreateUserProfile = ({ onCreateProfile, email, profileUserId }) => {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case \"firstName\":\r\n        return setFirstName(value);\r\n      case \"lastName\":\r\n        return setLastName(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    onCreateProfile({ email, firstName, lastName, user: profileUserId });\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n  };\r\n  return (\r\n    <>\r\n      <h2>Please, create your profile</h2>\r\n\r\n      <Form inline onSubmit={onSubmit}>\r\n        <Row className=\"justify-content-center mt-5\">\r\n          <Col md={3}>\r\n            <FormGroup floating>\r\n              <Input\r\n                id=\"firstName\"\r\n                value={firstName}\r\n                name=\"firstName\"\r\n                placeholder=\"First Name\"\r\n                type=\"text\"\r\n                onChange={handleInputChange}\r\n              />\r\n              <Label for=\"firstName\">First Name</Label>\r\n            </FormGroup>\r\n            <FormGroup floating>\r\n              <Input\r\n                id=\"examplePassword\"\r\n                value={lastName}\r\n                placeholder=\"Password\"\r\n                type=\"text\"\r\n                name=\"lastName\"\r\n                onChange={handleInputChange}\r\n              />\r\n              <Label for=\"examplePassword\">Last Name</Label>\r\n            </FormGroup>\r\n            <Button color=\"info\" outline>\r\n              Create\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  email: state.auth.email,\r\n  profileUserId: state.auth.id,\r\n});\r\nconst mapDispatchToProps = {\r\n  onCreateProfile: usersOperations.createProfile,\r\n};\r\n\r\nCreateUserProfile.propTypes = {\r\n  onCreateProfile: PropTypes.func.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  profileUserId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateUserProfile);\r\n","import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// components\r\nimport Loader from \"../../../Loader\";\r\nimport { Form, FormGroup, Input, Label, Button, Row, Col } from \"reactstrap\";\r\n\r\n// operations\r\nimport { usersOperations } from \"../../../../redux/users\";\r\n\r\nconst UpdateUserProfile = ({\r\n  firstName,\r\n  lastName,\r\n  email,\r\n  onUpdateProfile,\r\n  isLoading,\r\n}) => {\r\n  const [newFirstName, setNewFirstName] = useState(firstName);\r\n  const [newLastName, setNewLastName] = useState(lastName);\r\n  const [newEmail, setNewEmail] = useState(email);\r\n\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case \"newFirstName\":\r\n        return setNewFirstName(value);\r\n      case \"newLastName\":\r\n        return setNewLastName(value);\r\n      case \"newEmail\":\r\n        return setNewEmail(value);\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (newFirstName === \"\" || newLastName === \"\" || newEmail === \"\") {\r\n      toast.error(\"Field(s) cannot be empty!\");\r\n      return;\r\n    }\r\n\r\n    if (\r\n      newFirstName.trim() === firstName &&\r\n      newLastName.trim() === lastName &&\r\n      newEmail.trim() === email\r\n    ) {\r\n      toast.error(\"You cannot use the same values for updating!\");\r\n      return;\r\n    }\r\n    onUpdateProfile({\r\n      firstName: newFirstName.trim(),\r\n      lastName: newLastName.trim(),\r\n      email: newEmail.trim(),\r\n    });\r\n\r\n    toast.success(\"Profile has been updated!\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>\r\n        Hello,{firstName} {lastName}.\r\n      </h2>\r\n      <h2>Here you can update your profile</h2>\r\n\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Form inline onSubmit={onSubmit}>\r\n          <Row className=\"justify-content-center mt-5\">\r\n            <Col md={3}>\r\n              <FormGroup floating>\r\n                <Input\r\n                  id=\"firstName\"\r\n                  value={newFirstName}\r\n                  name=\"newFirstName\"\r\n                  placeholder=\"First Name\"\r\n                  type=\"text\"\r\n                  onChange={handleInputChange}\r\n                />\r\n                <Label for=\"firstName\">First Name</Label>\r\n              </FormGroup>\r\n              <FormGroup floating>\r\n                <Input\r\n                  id=\"lastName\"\r\n                  name=\"newLastName\"\r\n                  value={newLastName}\r\n                  placeholder=\"Password\"\r\n                  type=\"text\"\r\n                  onChange={handleInputChange}\r\n                />\r\n                <Label for=\"lastName\">Last Name</Label>\r\n              </FormGroup>\r\n\r\n              <FormGroup floating>\r\n                <Input\r\n                  id=\"email\"\r\n                  name=\"newEmail\"\r\n                  value={newEmail}\r\n                  placeholder=\"Password\"\r\n                  type=\"email\"\r\n                  onChange={handleInputChange}\r\n                />\r\n                <Label for=\"email\">Email</Label>\r\n              </FormGroup>\r\n              <Button color=\"info\" outline>\r\n                Update\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  firstName: state.users.currentUser.firstName,\r\n  lastName: state.users.currentUser.lastName,\r\n  email: state.users.currentUser.email,\r\n  isLoading: state.users.isLoading,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onUpdateProfile: usersOperations.updateProfile,\r\n};\r\n\r\nUpdateUserProfile.propTypes = {\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n  email: PropTypes.string,\r\n  onUpdateProfile: PropTypes.func,\r\n  isLoading: PropTypes.bool,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateUserProfile);\r\n","import { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// components\r\nimport CreateUserProfile from \"./CreateUserProfile\";\r\nimport UpdateUserProfile from \"./UpdateUserProfile\";\r\nimport Loader from \"../../Loader\";\r\nimport { Button } from \"reactstrap\";\r\n\r\n// operations\r\nimport { authOperations } from \"../../../redux/auth\";\r\nimport { usersOperations } from \"../../../redux/users\";\r\n\r\nconst User = ({\r\n  onLogout,\r\n  currentUserId,\r\n  getCurrentUserProfile,\r\n  getAddedContacts,\r\n  isLoading,\r\n}) => {\r\n  useEffect(() => {\r\n    !currentUserId && getCurrentUserProfile();\r\n  }, [getCurrentUserProfile, currentUserId]);\r\n\r\n  useEffect(() => {\r\n    !currentUserId && getAddedContacts();\r\n  }, [getAddedContacts, currentUserId]);\r\n\r\n  return isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <div className=\"pt-5\">\r\n      {!currentUserId ? <CreateUserProfile /> : <UpdateUserProfile />}\r\n\r\n      <Button className=\"mt-5\" onClick={onLogout} color=\"danger\" outline>\r\n        Logout\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  currentUserId: state.users.currentUser.id,\r\n  addedContacts: state.users.addedContact,\r\n  isLoading: state.users.isLoading,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n  getCurrentUserProfile: usersOperations.getCurrentProfile,\r\n  getAddedContacts: usersOperations.getAddedContacts,\r\n};\r\n\r\nUser.propTypes = {\r\n  onLogout: PropTypes.func,\r\n  currentUserId: PropTypes.string,\r\n  getCurrentUserProfile: PropTypes.func,\r\n  getAddedContacts: PropTypes.func,\r\n  isLoading: PropTypes.bool,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(User);\r\n"],"names":["mapDispatchToProps","onCreateProfile","usersOperations","connect","state","email","auth","profileUserId","id","useState","firstName","setFirstName","lastName","setLastName","handleInputChange","target","name","value","inline","onSubmit","e","preventDefault","user","className","md","floating","placeholder","type","onChange","for","color","outline","onUpdateProfile","users","currentUser","isLoading","newFirstName","setNewFirstName","newLastName","setNewLastName","newEmail","setNewEmail","Loader","trim","toast","onLogout","authOperations","getCurrentUserProfile","getAddedContacts","currentUserId","addedContacts","addedContact","useEffect","onClick"],"sourceRoot":""}